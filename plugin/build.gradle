/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Gradle plugin project to get you started.
 * For more details take a look at the Writing Custom Plugins chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.7/userguide/custom_plugins.html
 */

plugins {
    // Apply the Java Gradle plugin development plugin to add support for developing Gradle plugins
    id 'java-gradle-plugin'

    // Support generating Maven metadata for publishing
    id 'maven-publish'

    // Support publishing to the Gradle Plugin Portal
    id 'com.gradle.plugin-publish' version '0.12.0'

    // Apply the Groovy plugin to add support for Groovy
    id 'groovy'
}

repositories {
    // Use JCenter for resolving dependencies.
    jcenter()
    mavenCentral()
}

dependencies {
    // Use the awesome Spock testing and specification framework
    testImplementation 'org.spockframework:spock-core:1.3-groovy-2.5'
    testImplementation 'commons-io:commons-io:2.8.0'
}

group 'org.carlmontrobotics'

gradlePlugin {
    // Define the plugin
    plugins {
        webots {
            id = 'org.carlmontrobotics.webots'
            displayName = 'Webots Plugin'
            description = 'A plugin that simplifies developing Java code that uses your local Webots installation.'
            implementationClass = 'org.carlmontrobotics.gradle.WebotsPlugin'
        }
    }
}

// Info for publishing to the Gradle Plugin Portal
pluginBundle {
    website = 'https://github.com/DeepBlueRobotics/webots-gradle-plugin' 
    vcsUrl = 'https://github.com/DeepBlueRobotics/webots-gradle-plugin.git' 
    tags = ['webots']     
}

// Info for publishing to GitHub Packages
publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/DeepBlueRobotics/webots-gradle-plugin")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
                password = project.findProperty("gpr.key") ?: System.getenv("TOKEN")
            }
        }
    }
}

// Add a source set for the functional test suite
sourceSets {
    functionalTest {
    }
}

gradlePlugin.testSourceSets(sourceSets.functionalTest)
configurations.functionalTestImplementation.extendsFrom(configurations.testImplementation)

// Add a task to run the functional tests
tasks.register('functionalTest', Test) {
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
}

tasks.named('check') {
    // Run the functional tests as part of `check`
    dependsOn(tasks.functionalTest)
}
